Эта программа решает задачу предсказания стоимости дома по параметрам, используя XGBoost в качестве основной модели. Она начинается с импорта необходимых библиотек, таких как numpy, pandas и matplotlib, а затем загружает файлы набора данных (train.csv, test.csv и т.д.).

Предварительный анализ проводится с помощью . info() и пользовательская функция basic_details() для проверки отсутствующих значений, типов данных и уникальных подсчётов по всем столбцам. Код идентифицирует и удаляет аномалии с помощью метода Tukey, подсчитывая количество элементов, от которых каждая строка существенно отклоняется. После удаления отклонений, различные непрерывные числовые характеристики отрезаны к разумным доменно-специфическим границам для уменьшения влияния экстремальных значений.

Для улучшения производительности модели широко применяется инженерия функций. Это включает логарифмические преобразования искаженных переменных (LotArea, MasVnrArea и т.д.), создание взаимодействующих функций (таких как Area, AllSF и их логарифмические версии) и группирование непрерывных переменных в категории (например, GarageArea_cat, GrLivArea_cat). Дополнительные двоичные функции создаются для того, чтобы указать, являются ли некоторые значения ненулевыми (например, Is_MasVnr, Is_BsmtFinSF1 и т.д.).

Отсутствующие значения обрабатываются с использованием комбинации среднего условного расчета для числовых элементов и строк-местозаполнителей типа "N" для категориальных переменных. Категориальные свойства затем преобразуются в одноразовые переменные с помощью pd.get_dummies().

Описательная статистическая кодировка вводится путем добавления колонок, указывающих, превышает ли значение среднее, медианное, Q1 или Q3 для числовых элементов, что дополнительно обогащает набор данных. Данные разбиваются на наборы учебных и тестовых заданий после проектирования функций.

Целевая переменная SalePrice подвергается логарифмической трансформации с помощью np.log1p() для стабилизации вариации и улучшения производительности модели. XGBoost DMatrix используется для эффективного обучения. Модель тренируется с использованием пользовательского набора параметров (max_depth=2, learning_rate=0.1 и т.д.) с ранней остановкой на основе абсолютной ошибки (MAE). Обучаемая модель достигает стабильной производительности, и на окончательном тестовом наборе делается тестовое предсказание.

Для повышения точности, просочившиеся цены на продажу домов (известные из внешних источников) вносятся в окончательные прогнозы, заменяя предположения модели для тех конкретных тестовых идентификаторов. Наконец, для визуализации 50 наиболее важных функций используется xgb.plot_importance(), а также для создания диаграмм SHAP (summary и waterfall) для объяснения поведения модели на прогнозах выборки.